# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PjIOTBNO5t07vJ01R99-jHzU13zlFI9I
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the Abalone dataset (replace 'abalone.data' with the path to your dataset)
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
column_names = ["Sex", "Length", "Diameter", "Height", "WholeWeight", "ShuckedWeight", "VisceraWeight", "ShellWeight", "Rings"]
data = pd.read_csv(url, names=column_names)

# Split the data into training (first 500 observations) and testing data
train_data = data.iloc[:500]
test_data = data.iloc[500:]

# Create scatter plots
plt.figure(figsize=(6, 5))
plt.scatter(train_data["Length"], train_data["Rings"])
plt.xlabel("Length")
plt.ylabel("Rings")
plt.title("Scatter Plot of Length vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["ShellWeight"], train_data["Rings"])
plt.xlabel("ShellWeight")
plt.ylabel("Rings")
plt.title("Scatter Plot of ShellWeight vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["Diameter"], train_data["Rings"])
plt.xlabel("Diameter")
plt.ylabel("Rings")
plt.title("Scatter Plot of Diameter vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["Height"], train_data["Rings"])
plt.xlabel("Height")
plt.ylabel("Rings")
plt.title("Scatter Plot of Height vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["WholeWeight"], train_data["Rings"])
plt.xlabel("WholeWeight")
plt.ylabel("Rings")
plt.title("Scatter Plot of WholeWeight vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["ShuckedWeight"], train_data["Rings"])
plt.xlabel("ShuckedWeight")
plt.ylabel("Rings")
plt.title("Scatter Plot of ShuckedWeight vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 5))
plt.scatter(train_data["VisceraWeight"], train_data["Rings"])
plt.xlabel("VisceraWeight")
plt.ylabel("Rings")
plt.title("Scatter Plot of VisceraWeight vs. Rings (Training Data)")

plt.tight_layout()
plt.show()

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Select the "Length" attribute for analysis
X_train_length = train_data[["Length"]]
y_train = train_data["Rings"]

# Create and fit a linear regression model
regressor_length = LinearRegression()
regressor_length.fit(X_train_length, y_train)

# Estimate coefficients
coefficients_length = regressor_length.coef_
intercept_length = regressor_length.intercept_

# Predict on training data
y_train_pred_length = regressor_length.predict(X_train_length)

# Predict on testing data
X_test_length = test_data[["Length"]]
y_test = test_data["Rings"]
y_test_pred_length = regressor_length.predict(X_test_length)

# Calculate MSE for both training and testing data
mse_train_length = mean_squared_error(y_train, y_train_pred_length)
mse_test_length = mean_squared_error(y_test, y_test_pred_length)

print("Regression Coefficients (Length):")
print("Coefficient:", coefficients_length[0])
print("Intercept:", intercept_length)
print("MSE for Length (Training Data):", mse_train_length)
print("MSE for Length (Testing Data):", mse_test_length)

# Select the "ShellWeight" attribute for analysis
X_train_shell_weight = train_data[["ShellWeight"]]

# Create and fit a linear regression model
regressor_shell_weight = LinearRegression()
regressor_shell_weight.fit(X_train_shell_weight, y_train)

# Estimate coefficients
coefficients_shell_weight = regressor_shell_weight.coef_
intercept_shell_weight = regressor_shell_weight.intercept_

# Predict on training data
y_train_pred_shell_weight = regressor_shell_weight.predict(X_train_shell_weight)

# Predict on testing data
X_test_shell_weight = test_data[["ShellWeight"]]
y_test_pred_shell_weight = regressor_shell_weight.predict(X_test_shell_weight)

# Calculate MSE for both training and testing data
mse_train_shell_weight = mean_squared_error(y_train, y_train_pred_shell_weight)
mse_test_shell_weight = mean_squared_error(y_test, y_test_pred_shell_weight)

print("\nRegression Coefficients (ShellWeight):")
print("Coefficient:", coefficients_shell_weight[0])
print("Intercept:", intercept_shell_weight)
print("MSE for ShellWeight (Training Data):", mse_train_shell_weight)
print("MSE for ShellWeight (Testing Data):", mse_test_shell_weight)